name: CD

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      TARGET_FOLDER: ${{ secrets.SSH_TARGET_FOLDER }}
      SHA: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo $SSH_PRIVATE_KEY > ~/.ssh/ifastnet_rsa
          echo $SSH_PUBLIC_KEY > ~/.ssh/ifastnet_rsa.pub
          chmod 600 ~/.ssh/ifastnet_rsa
          chmod 600 ~/.ssh/ifastnet_rsa.pub
          ssh-keyscan -H -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts
          cat ~/.ssh/ifastnet_rsa.pub | ssh -i ~/.ssh/ifastnet_rsa -p $SSH_PORT $SSH_USER@$SSH_HOST 'cat >> .ssh/authorized_keys'
      - name: Install and Build Assets
        run: |
          npm install
          npm run build
      - name: Build .env
        run: |
          echo "Build .env"
          echo "APP_NAME=${{ vars.APP_NAME }}" > .env
          echo "APP_ENV=${{ vars.APP_ENV }}" >> .env
          echo "APP_KEY='${{ secrets.APP_KEY }}'" >> .env
          echo "APP_DEBUG=${{ vars.APP_DEBUG }}" >> .env
          echo "APP_URL=${{ vars.APP_URL }}" >> .env
          echo "LOG_CHANNEL=${{ vars.LOG_CHANNEL }}" >> .env
          echo "LOG_DEPRECATIONS_CHANNEL=${{ vars.LOG_DEPRECATIONS_CHANNEL }}" >> .env
          echo "LOG_LEVEL=${{ vars.LOG_LEVEL }}" >> .env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD='${{ secrets.DB_PASSWORD }}'" >> .env
          echo "BROADCAST_DRIVER=${{ vars.BROADCAST_DRIVER }}" >> .env
          echo "CACHE_DRIVER=${{ vars.CACHE_DRIVER }}" >> .env
          echo "FILESYSTEM_DISK=${{ vars.FILESYSTEM_DISK }}" >> .env
          echo "QUEUE_CONNECTION=${{ vars.QUEUE_CONNECTION }}" >> .env
          echo "SESSION_DRIVER=${{ vars.SESSION_DRIVER }}" >> .env
          echo "SESSION_LIFETIME=${{ vars.SESSION_LIFETIME }}" >> .env
          echo "SESSION_DOMAIN=${{ vars.SESSION_DOMAIN }}" >> .env
          echo "MAIL_MAILER=${{ secrets.MAIL_MAILER }}" >> .env
          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}" >> .env
          echo "MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}" >> .env
          echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env
          echo "SANCTUM_STATEFUL_DOMAINS=${{ vars.SANCTUM_STATEFUL_DOMAINS }}" >> .env
          echo "CLOCKWORK_ENABLE=${{ secrets.CLOCKWORK_ENABLE }}" >> .env
      - name: Build deploy script
        run: |
          echo 'alias php=/opt/alt/php82/usr/bin/php'
          echo 'alias composer="php -f /opt/cpanel/composer/bin/composer"'
          echo 'echo "Set application to maintenance mode"' >> deploy.sh
          echo 'if [ -f artisan ]; then php artisan down; fi' >> deploy.sh
          echo 'echo "Extracting artifact"' >> deploy.sh
          echo 'tar -xvzf build.tar.gz -C .' >> deploy.sh
          echo 'echo "Installing dependencies"' >> deploy.sh
          echo 'composer install --optimize-autoloader --no-dev' >> deploy.sh
          echo 'echo "Setup Laravel"' >> deploy.sh
          echo 'chmod -R 775 storage' >> deploy.sh
          echo 'if [ ! -d /home/$SSH_USER/$TARGET_FOLDER ]; then ln -s /home/$SSH_USER/apps/$TARGET_FOLDER/public /home/$SSH_USER/$TARGET_FOLDER; fi' >> deploy.sh
          echo 'if [ ! -d /home/$SSH_USER/$TARGET_FOLDER/storage ]; then ln -s /home/$SSH_USER/apps/$TARGET_FOLDER/storage/app/public /home/$SSH_USER/$TARGET_FOLDER/storage; fi' >> deploy.sh
          echo 'php artisan storage:link' >> deploy.sh
          echo 'php artisan migrate --force --seed' >> deploy.sh
          echo 'php artisan cache:clear' >> deploy.sh
          echo 'php artisan config:clear' >> deploy.sh
          echo 'php artisan config:cache' >> deploy.sh
          echo 'php artisan event:clear' >> deploy.sh
          echo 'php artisan event:cache' >> deploy.sh
          echo 'php artisan route:clear' >> deploy.sh
          echo 'php artisan route:cache' >> deploy.sh
          echo 'php artisan view:clear' >> deploy.sh
          echo 'php artisan view:cache' >> deploy.sh
          echo 'echo "Set application to live mode"' >> deploy.sh
          echo 'if [ -f artisan ]; then php artisan up; fi' >> deploy.sh
          echo 'rm -rf build.tar.gz' >> deploy.which
          chmod +x deploy.sh
      - name: Create artifact
        run: |
          mkdir build
          rm -rf resources/css resources/js
          cp -r app bootstrap config database public resources routes storage composer* artisan .env build
          cd build
          tar -czf build.tar.gz *
      - name: Copy build artifact to server
        run: |
          scp -r -i ~/.ssh/ifastnet_rsa -P $SSH_PORT {build/build.tar.gz,deploy.sh} $SSH_USER@$SSH_HOST:/home/$SSH_USER/apps/$TARGET_FOLDER
          ssh -i ~/.ssh/ifastnet_rsa $SSH_USER@$SSH_HOST -p $SSH_PORT "cd $TARGET_FOLDER && ./deploy.sh && rm ./deploy.sh"
